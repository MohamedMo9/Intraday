SELECT case when QUEUE_NAME in ('Voice - English - Australia', 'Voice - English - Indonesia', 'Voice - English - Japan', 'Voice - English - New Zealand', 'Voice - English - Singapore' ) then 'APAC Combined' else QUEUE_NAME end as QName, ( TO_CHAR( TO_DATE( convert_timezone( 'UTC', case when QName in ('APAC Combined') then 'Asia/Singapore' when QName ilike ('%Business') then 'UTC' else queue_data.queue__tz_database_name end, CAST(lookup_contact_calls.Start_Time AS TIMESTAMP_NTZ) ) ), 'YYYY-MM-DD' ) ) AS CALL_DATE, ( CAST( EXTRACT( HOUR FROM convert_timezone( 'UTC', case when QName in ('APAC Combined') then 'Asia/Singapore' when QName ilike ('%Business') then 'UTC' else queue_data.queue__tz_database_name end, date_trunc(hour, START_TIME) ) ) AS INT ) ) AS call_hour, COUNT(*) AS calls_count, sum(lookup_contact_calls.FLAG_ABANDONED) as abandoned, sum( case when WAITING_TIME_SEC <= 15 then 1 else 0 end ) as answered_on_time_15sec, sum( case when lookup_contact_calls.Waiting_time_sec <= 45 then 1 else 0 end ) AS answered_45_sec FROM REPORTS.LOOKUP_CONTACT_CALLS AS lookup_contact_calls left join RPT_CS_DATA.source_contact_forecast__cs_queue_open_hours as queue_data on lookup_contact_calls.QUEUE_NAME = queue_data.queue__queue_name WHERE ( case when lookup_contact_calls.flag_call_in = 1 then true when lookup_contact_calls.flag_call_in = 0 then false end ) AND ( NOT ( case when lookup_contact_calls.flag_service_closed = 1 then true when lookup_contact_calls.flag_service_closed = 0 then false end ) OR ( case when lookup_contact_calls.flag_service_closed = 1 then true when lookup_contact_calls.flag_service_closed = 0 then false end ) IS NULL ) AND START_TIME >= DATE_TRUNC(month, DATEADD(MONTH, -2, current_date())) AND START_TIME < DATE_TRUNC(day, current_date()) GROUP BY 1, 2, 3 order by 2 desc
SELECT ( CASE WHEN case when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) between 0 and 3 then True when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) > 3 then False end THEN 'Yes' ELSE 'No' END ) AS "lookup_agent_hours.newbie", ( TO_CHAR( convert_timezone( 'UTC', queue_data.queue__tz_database_name, START_TIME ), 'YYYY-MM-DD' ) ) AS DayDate, RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY.EMPLOYEE__TEAM_LEAD_NAME AS "lookup_agent_hours.team_lead", sum(distinct lookup_contact_calls.Talking_time_sec) AS "lookup_contact_calls.talking_time_sec", count(distinct lookup_contact_calls.Talking_time_sec) AS count_calls, sum( distinct lookup_contact_calls.After_work_time_sec ) AS "lookup_contact_calls.wrap_up_time", case when ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY.TEAM__SUPPORT_TYPE = 'Business' then 'Business' else ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY.TEAM__SUPPORT_TEAM_REGION end as region_name FROM reports.lookup_contact_calls AS lookup_contact_calls LEFT JOIN rpt_cs_data.analytical_schedule__all_shifts AS lookup_agent_hours ON lower(lookup_contact_calls.agent_email) = lower(lookup_agent_hours.employee__email) and ( date_trunc( 'day', ( TO_CHAR( DATE_TRUNC( 'second', lookup_contact_calls.Start_Time :: timestamp ), 'YYYY-MM-DD HH24:MI:SS' ) ) :: timestamp ) ) = ( date_trunc( 'day', ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_time), 'YYYY-MM-DD' ) ) :: timestamp ) ) left join RPT_CS_DATA.source_contact_forecast__cs_queue_open_hours as queue_data on lookup_contact_calls.QUEUE_NAME = queue_data.queue__queue_name left join RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY on RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY.EMPLOYEE__EMAIL = lookup_contact_calls.AGENT_EMAIL WHERE ( case when lookup_contact_calls.flag_call_in = 1 then true when lookup_contact_calls.flag_call_in = 0 then false end ) AND ( NOT ( case when lookup_contact_calls.flag_service_closed = 1 then true when lookup_contact_calls.flag_service_closed = 0 then false end ) OR ( case when lookup_contact_calls.flag_service_closed = 1 then true when lookup_contact_calls.flag_service_closed = 0 then false end ) IS NULL ) AND ( ( (lookup_contact_calls.Start_Time) >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (lookup_contact_calls.Start_Time) < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) and EMPLOYEE__REPORT_DT = ( select max(EMPLOYEE__REPORT_DT) from RPT_CS_DATA.ANALYTICAL_AGENT_INFO__EMPLOYEE_DETAILS_AND_CHANGES_DAILY ) GROUP BY DayDate, 1, 3, region_name HAVING AVG(lookup_contact_calls.After_work_time_sec / 60) IS NOT NULL AND AVG(lookup_contact_calls.Talking_time_sec / 60) IS NOT NULL ORDER BY 4 DESC
SELECT ( CASE WHEN case when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) between 0 and 3 then True when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) > 3 then False end THEN 'Yes' ELSE 'No' END ) AS "lookup_agent_hours.newbie", ( TO_CHAR( TO_DATE(lookup_agent_hours.SHIFT_START_LOCAL_TIME), 'YYYY-MM-DD' ) ) AS "lookup_agent_hours.shift_start_local_time_date", lookup_agent_hours.EMPLOYEE__TEAM_LEAD_EMAIL AS "lookup_agent_hours.team_lead_email", COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'E-Mail' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.distinct_contact_key ELSE NULL END ) / CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.email_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.email_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS "lookup_agent_contacts_summarized.productivity_email", COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'E-Mail' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.distinct_contact_key ELSE NULL END ), CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.email_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.email_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS hours_count FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours LEFT JOIN REPORTS.LOOKUP_AGENT_CONTACTS_SUMMARIZED AS lookup_agent_contacts_summarized ON lookup_agent_hours.EMPLOYEE__EMAIL = lookup_agent_contacts_summarized.AGENT_EMAIL AND lookup_agent_hours.SHIFT_START_TIME = lookup_agent_contacts_summarized.CONTACT_START_HOURPART WHERE lookup_agent_hours.CHANNEL_TYPE = 'email' AND lookup_agent_hours.EMPLOYEE__DEPARTMENT = 'cs' AND ( case when lookup_agent_hours.employee__active_status is NULL then FALSE ELSE TRUE END ) AND ( ( (lookup_agent_hours.SHIFT_START_LOCAL_TIME) >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (lookup_agent_hours.SHIFT_START_LOCAL_TIME) < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) GROUP BY ( TO_DATE(lookup_agent_hours.SHIFT_START_LOCAL_TIME) ), 1, 3 ORDER BY 4 DESC
SELECT ( TO_CHAR( TO_DATE(zendesk_report_desk_case."CREATED_AT"), 'YYYY-MM-DD' ) ) AS "zendesk_report_desk_case.created_at_date", case when zendesk_report_desk_case."GROUP_NAME" is NULL then NULL else trim(zendesk_report_desk_case."GROUP_NAME") end AS "zendesk_report_desk_case.group_name", sum( case when zendesk_tickets_extra_info.ticket_first_response BETWEEN 0 and 54000 THEN 1 else 0 end ) AS "resolved_within_15hrs", sum( case when zendesk_tickets_extra_info.ticket_first_response > 0 then 1 else Null end ) :: double precision, sum( case when zendesk_tickets_extra_info.ticket_resolution BETWEEN 0 and 86400 THEN 1 else null end ) AS "resolved_within_24hrs", sum( case when zendesk_tickets_extra_info.ticket_resolution > 0 then 1 else Null end ) :: double precision, COUNT(DISTINCT zendesk_report_desk_case."TICKET_ID") AS "zendesk_report_desk_case.count" FROM REPORTS.ZENDESK_tickets AS zendesk_report_desk_case LEFT JOIN REPORTS.ZENDESK_TICKETS_EXTRA_INFO AS zendesk_tickets_extra_info ON (zendesk_report_desk_case."TICKET_ID") = (zendesk_tickets_extra_info."TICKET_ID") WHERE ( ( (zendesk_report_desk_case."CREATED_AT") >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (zendesk_report_desk_case."CREATED_AT") < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) AND ( ( UPPER( ( case when zendesk_report_desk_case."GROUP_NAME" in ( 'Agent IS (Log In, Verification, How It Works, Acct Mgmt, Other)', 'CS Czech & Slovak', 'CS English General ', 'CS French', 'CS German', 'CS HAT', 'CS Hungarian', 'CS Italian', 'CS Polish', 'CS Romanian', 'CS Russian', 'CS Spanish', 'CS Turkish', 'CS Ukranian', 'cs general', 'z [don''t assign] IS (Balances, Plastic, Pricing)', 'z [don''t assign] IS (Transfer Status, Edit Transfer, Payment)', 'z [don''t assign] IS Business 1 (WMM, Balances, Edit)', 'z [don''t assign] IS Business 2 (Verify, Account Mgmt)' ) OR zendesk_report_desk_case."GROUP_NAME" ilike 'CS%' then 'CS' when zendesk_report_desk_case."GROUP_NAME" ilike 'Ops%' then 'Ops' when zendesk_report_desk_case."GROUP_NAME" ilike 'Verification%' then 'Verification' else zendesk_report_desk_case."GROUP_NAME" end ) ) = UPPER('CS') ) ) AND ( case when zendesk_tickets_extra_info.real_contact = 1 then TRUE when zendesk_tickets_extra_info.real_contact = 0 then FALSE else NULL end ) AND ( case when zendesk_tickets_extra_info.started_by_cst = 1 then TRUE when zendesk_tickets_extra_info.started_by_cst = 0 then FALSE else NULL end ) GROUP BY (TO_DATE(zendesk_report_desk_case."CREATED_AT")), 2 ORDER BY 1
SELECT case when cs_twilio_chat_summary."QUEUE" = 'English - Australia' or cs_twilio_chat_summary."QUEUE" = 'English - APAC' then 'APAC Chats' else cs_twilio_chat_summary."QUEUE" end AS QName, ( TO_CHAR( TO_DATE( convert_timezone( 'UTC', case when QName in ('APAC Chats') then 'Asia/Singapore' when QName ilike ('%Business') then 'UTC' when QName ilike ('%Spanish%') then 'UTC' else queue_data.queue__tz_database_name end, cs_twilio_chat_summary."CHAT_STARTED_AT" ) ), 'YYYY-MM-DD' ) ) AS CHAT_DATE, ( CAST( EXTRACT( HOUR FROM TO_TIMESTAMP_NTZ( convert_timezone( 'UTC', case when QName in ('APAC Chats') then 'Asia/Singapore' when QName ilike ('%Business') then 'UTC' when QName ilike ('%Spanish%') then 'UTC' else queue_data.queue__tz_database_name end, cs_twilio_chat_summary."CHAT_STARTED_AT" ) ) ) AS INT ) ) AS CHAT_HOUR, COUNT(DISTINCT cs_twilio_chat_summary."CHAT_ID") AS "cs_twilio_chat_summary.count", sum( case when cs_twilio_chat_summary."IS_ABANDONED_FLAG" = true then 1 else 0 end ) as abandoned_chats, count( case when ( cs_twilio_chat_summary."CHAT_QUEUE_TIME_SEC" + cs_twilio_chat_summary."CHAT_AGENT_QUEUE_TIME_SEC" ) <= 60 then 1 else null end ) as Ans_within_60sec, AVG(cs_twilio_chat_summary."CHAT_QUEUE_TIME_SEC") as Avg_queue_time, sum( case when coalesce( cs_twilio_chat_summary.chat_id, cs_twilio_chat_summary.task_sid ) is not null then 1 else null end ) AS tot_for_abn FROM "REPORTS"."CS_TWILIO_CHAT_SUMMARY" AS cs_twilio_chat_summary left join RPT_CS_DATA.source_contact_forecast__cs_queue_open_hours as queue_data on cs_twilio_chat_summary.QUEUE = queue_data.queue__queue_name WHERE ( ( (cs_twilio_chat_summary."CHAT_STARTED_AT") >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (cs_twilio_chat_summary."CHAT_STARTED_AT") < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) and cs_twilio_chat_summary.QUEUE is not NULL and QUEUE not like 'Screening%' and QUEUE <> 'Test Queue' and queue <> 'Training' and QUEUE <> 'Fallback' GROUP BY 2, 1, 3 ORDER BY 1 DESC
SELECT ( CASE WHEN case when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) between 0 and 3 then True when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) > 3 then False end THEN 'Yes' ELSE 'No' END ) AS Newbie, case when cs_twilio_chat_summary."QUEUE" = 'English - Australia' or cs_twilio_chat_summary."QUEUE" = 'English - APAC' then 'APAC Chats' else cs_twilio_chat_summary."QUEUE" end AS QName, ( TO_CHAR( TO_DATE( convert_timezone( 'UTC', case when QName in ('APAC Chats') then 'Asia/Singapore' else queue_data.queue__tz_database_name end, cs_twilio_chat_summary."CHAT_STARTED_AT" ) ), 'YYYY-MM-DD' ) ) AS CHAT_DATE, sum( contact_agent_handle_times."AGENT_NET_HANDLING_TIME_SEC" ) AS Total_Handling_Time, count( contact_agent_handle_times."AGENT_NET_HANDLING_TIME_SEC" ) AS COUNT_CHATS, EMPLOYEE__TEAM_LEAD_NAME as LEAD_NAME FROM "REPORTS"."CS_TWILIO_CHAT_SUMMARY" AS cs_twilio_chat_summary LEFT JOIN "REPORTS"."CONTACT_AGENT_HANDLE_TIMES" AS contact_agent_handle_times ON (cs_twilio_chat_summary."CHAT_ID") = (contact_agent_handle_times."CONTACT_ID") left join RPT_CS_DATA.source_contact_forecast__cs_queue_open_hours as queue_data on cs_twilio_chat_summary.QUEUE = queue_data.queue__queue_name LEFT JOIN rpt_cs_data.analytical_schedule__all_shifts AS lookup_agent_hours ON lookup_agent_hours.employee__email = lower((lower(cs_twilio_chat_summary."AGENT_EMAIL"))) and lookup_agent_hours.shift_start_time = ( TO_CHAR( DATE_TRUNC( 'minute', DATE_TRUNC( 'minute', TIMESTAMPADD( MINUTE, -( MOD( EXTRACT( MINUTE FROM TO_TIMESTAMP_NTZ(cs_twilio_chat_summary."CHAT_AGENT_STARTED_AT") ), 30 ) ), TO_TIMESTAMP_NTZ(cs_twilio_chat_summary."CHAT_AGENT_STARTED_AT") ) ) ), 'YYYY-MM-DD HH24:MI' ) ) WHERE ( ( ( (((cs_twilio_chat_summary."CHAT_STARTED_AT"))) >= ((DATEADD('day', -45, CURRENT_DATE()))) AND (((cs_twilio_chat_summary."CHAT_STARTED_AT"))) < ( ( DATEADD('day', 45, DATEADD('day', -44, CURRENT_DATE())) ) ) ) ) ) and QName is not null and QName <> 'Fallback' and QName <> 'Test Queue' and QName not like 'Screening%' GROUP BY 1, 2, 3, 6 order by 2
SELECT ( CASE WHEN case when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) between 0 and 3 then True when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) > 3 then False end THEN 'Yes' ELSE 'No' END ) AS Newbie, lookup_karmatime_agents.team_lead AS "lookup_karmatime_agents.team_lead", ( TO_CHAR( TO_DATE(zendesk_report_comments.comment_created_at), 'YYYY-MM-DD' ) ) AS "zendesk_report_comments.comment_created_date", zendesk_report_desk_case.GROUP_NAME, sum(zendesk_audit_handling_time.total_handling_time), count(zendesk_audit_handling_time.total_handling_time), ( COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE( zendesk_audit_handling_time.total_handling_time / 60, 0 ) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(zendesk_audit_handling_time.audit_id), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(zendesk_audit_handling_time.audit_id), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) / NULLIF( COUNT( DISTINCT CASE WHEN zendesk_audit_handling_time.total_handling_time / 60 IS NOT NULL THEN zendesk_audit_handling_time.audit_id ELSE NULL END ), 0 ) ) AS "zendesk_audit_handling_time.avg_comment_handling_time" FROM REPORTS.ZENDESK_tickets AS zendesk_report_desk_case LEFT JOIN reports.zendesk_comments AS zendesk_report_comments ON (zendesk_report_desk_case."TICKET_ID") = zendesk_report_comments.ticket_id LEFT JOIN reports.lookup_karmatime_agents AS lookup_karmatime_agents ON lower(zendesk_report_comments.agent_email) = lower(lookup_karmatime_agents.agent_email) LEFT JOIN REPORTS.ZENDESK_TICKETS_EXTRA_INFO AS zendesk_tickets_extra_info ON (zendesk_report_desk_case."TICKET_ID") = (zendesk_tickets_extra_info."TICKET_ID") LEFT JOIN REPORTS.AUDIT_AND_COMMENT_HANDLING_TIME AS zendesk_audit_handling_time ON zendesk_report_comments.comment_id = zendesk_audit_handling_time.comment_id LEFT JOIN reports.agent_contacts AS agent_interactions ON (zendesk_report_desk_case."TICKET_ID") = agent_interactions.ZD_TICKET_ID and agent_interactions.CONTACT_NO = 1 LEFT JOIN rpt_cs_data.analytical_agent_info__employee_details_and_changes_daily AS employee_list_daily ON agent_interactions.AGENT_EMAIL = (employee_list_daily."EMPLOYEE__EMAIL") and date_trunc('day', agent_interactions.CONTACT_STARTED_AT) = ( TO_CHAR( TO_DATE(employee_list_daily."EMPLOYEE__REPORT_DT"), 'YYYY-MM-DD' ) ) LEFT JOIN rpt_cs_data.analytical_schedule__all_shifts AS lookup_agent_hours ON lower(agent_interactions.AGENT_EMAIL) = lower(lookup_agent_hours.employee__email) and ( date_trunc( 'day', ( TO_CHAR( DATE_TRUNC('second', CONTACT_STARTED_AT :: timestamp), 'YYYY-MM-DD HH24:MI:SS' ) ) :: timestamp ) ) = ( date_trunc( 'day', ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_time), 'YYYY-MM-DD' ) ) :: timestamp ) ) WHERE ( ( (zendesk_report_comments.comment_created_at) >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (zendesk_report_comments.comment_created_at) < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) AND ( ( UPPER((zendesk_report_comments.channel)) = UPPER('EMAIL') ) ) AND ( case when zendesk_tickets_extra_info.real_contact = 1 then TRUE when zendesk_tickets_extra_info.real_contact = 0 then FALSE else NULL end ) AND ( case when zendesk_tickets_extra_info.started_by_cst = 1 then TRUE when zendesk_tickets_extra_info.started_by_cst = 0 then FALSE else NULL end ) and zendesk_audit_handling_time.total_handling_time is not null and GROUP_NAME like 'CS%' and GROUP_NAME not ilike 'CS Macros' GROUP BY ( TO_DATE(zendesk_report_comments.comment_created_at) ), 1, 2, 4, employee_list_daily."TEAM__SUPPORT_TYPE" ORDER BY 5 DESC
select date_trunc(day, zendesk_report_desk_case.created_at) as time_bucket, group_name as email_queue, issue_selector_category as issue, count(distinct(zendesk_report_desk_case.ticket_id)) as email_volumes, sum( case when zendesk_tickets_extra_info.ticket_first_response > 0 then 1 else null end ) as first_response_tickets, sum( case when zendesk_tickets_extra_info.ticket_first_response BETWEEN 0 and 54000 THEN 1 else 0 end ) as within_15hrs, sum( case when zendesk_tickets_extra_info.ticket_resolution BETWEEN 0 and 86400 THEN 1 else null end ) as within_24hrs, sum( case when zendesk_tickets_extra_info.ticket_resolution > 0 THEN 1 else null end ) as Total_Answered_Tickets from reports.zendesk_tickets AS zendesk_report_desk_case left join reports.zendesk_tickets_extra_info as zendesk_tickets_extra_info ON (zendesk_report_desk_case.ticket_id) = (zendesk_tickets_extra_info.ticket_id) where time_bucket >= date_trunc(day, dateadd(day, -45, current_date())) and time_bucket < date_trunc(day, current_date()) and email_queue ilike '%cs%' and email_queue not like 'CS Open Access%' and email_queue not like '%Sykes%' group by 1, 2, 3 order by 1, 2
SELECT ( CASE WHEN case when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) between 0 and 3 then True when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) > 3 then False end THEN 'Yes' ELSE 'No' END ) AS "lookup_agent_hours.newbie", ( TO_CHAR( TO_DATE(lookup_agent_hours.SHIFT_START_LOCAL_TIME), 'YYYY-MM-DD' ) ) AS Date, lookup_agent_hours.EMPLOYEE__TEAM_LEAD_EMAIL AS "lookup_agent_hours.team_lead_email", COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'Phones' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.contact_id ELSE NULL END ) as calls, CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.phone_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.phone_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS hours FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours LEFT JOIN REPORTS.LOOKUP_AGENT_CONTACTS_SUMMARIZED AS lookup_agent_contacts_summarized ON lookup_agent_hours.EMPLOYEE__EMAIL = lookup_agent_contacts_summarized.AGENT_EMAIL AND lookup_agent_hours.SHIFT_START_TIME = lookup_agent_contacts_summarized.CONTACT_START_HOURPART WHERE lookup_agent_hours.CHANNEL_TYPE = 'phone' AND lookup_agent_hours.EMPLOYEE__DEPARTMENT = 'cs' AND ( case when lookup_agent_hours.employee__active_status is NULL then FALSE ELSE TRUE END ) AND ( ( (lookup_agent_hours.SHIFT_START_LOCAL_TIME) >= ((DATEADD('day', -44, CURRENT_DATE()))) AND (lookup_agent_hours.SHIFT_START_LOCAL_TIME) < ( ( DATEADD('day', 45, DATEADD('day', -44, CURRENT_DATE())) ) ) ) ) and PHONE_HOURS >= 0 and PHONE_HOURS < 1000 GROUP BY 1, 2, 3 ORDER BY 3 DESC
SELECT ( CASE WHEN case when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) between 0 and 3 then True when ( ( extract( year from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( year from lookup_agent_hours.employee__hire_date :: timestamp ) ) * 12 + extract( MONTH from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( month from lookup_agent_hours.employee__hire_date :: timestamp ) + case when extract( day from ( TO_CHAR( TO_DATE(lookup_agent_hours.shift_start_local_time), 'YYYY-MM-DD' ) ) :: timestamp ) - extract( day from lookup_agent_hours.employee__hire_date :: timestamp ) < 0 then -1 else 0 end ) > 3 then False end THEN 'Yes' ELSE 'No' END ) AS Newbie, ( TO_CHAR( TO_DATE(lookup_agent_hours.SHIFT_START_LOCAL_TIME), 'YYYY-MM-DD' ) ) AS Date, lookup_agent_hours.EMPLOYEE__TEAM_LEAD_EMAIL AS Lead_Email, COUNT( DISTINCT CASE WHEN ( lookup_agent_contacts_summarized.channel_type = 'Chat' ) AND ( lookup_agent_contacts_summarized.missed_contact = 'no' ) THEN lookup_agent_contacts_summarized.contact_id ELSE NULL END ) as Trans_Count, CASE WHEN COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE((lookup_agent_hours.chat_hours), 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5((lookup_agent_hours.distinct_table_key)), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) = 0 THEN 1 ELSE COALESCE( CAST( ( SUM( DISTINCT ( CAST( FLOOR( COALESCE(lookup_agent_hours.chat_hours, 0) *(1000000 * 1.0) ) AS DECIMAL(38, 0) ) ) + ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) - SUM( DISTINCT ( TO_NUMBER( MD5(lookup_agent_hours.distinct_table_key), 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' ) % 1.0e27 ) :: NUMERIC(38, 0) ) ) AS DOUBLE PRECISION ) / CAST((1000000 * 1.0) AS DOUBLE PRECISION), 0 ) END AS Chat_Hours FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours LEFT JOIN REPORTS.LOOKUP_AGENT_CONTACTS_SUMMARIZED AS lookup_agent_contacts_summarized ON lookup_agent_hours.EMPLOYEE__EMAIL = lookup_agent_contacts_summarized.AGENT_EMAIL AND lookup_agent_hours.SHIFT_START_TIME = lookup_agent_contacts_summarized.CONTACT_START_HOURPART WHERE ( case when lookup_agent_hours.hours_worked is not NULL then TRUE else FALSE end ) AND ( lookup_agent_hours.EMPLOYEE__DEPARTMENT IS NULL OR lookup_agent_hours.EMPLOYEE__DEPARTMENT <> 'Fraud' ) AND ( ( (lookup_agent_hours.SHIFT_START_LOCAL_TIME) >= ((DATEADD('day', -44, CURRENT_DATE()))) AND (lookup_agent_hours.SHIFT_START_LOCAL_TIME) < ( ( DATEADD('day', 45, DATEADD('day', -44, CURRENT_DATE())) ) ) ) ) and CHAT_HOURS < 1000 and CHAT_HOURS >= 0 GROUP BY ( TO_DATE(lookup_agent_hours.SHIFT_START_LOCAL_TIME) ), 1, 3 ORDER BY 1
select to_char(to_date(DATE_HOUR), 'YYYY-MM-DD') as date, GROUP_QUEUE_NAME, CHANNEL_TYPE, sum(SCHEDULED_HOURS) as Scheduled_Hours, sum(HANDLING_TIME) as Handling_Time from REPORTS.CS_ADHERENCE_OCCUPANCY where GROUP_QUEUE_NAME ilike 'CS%' and GROUP_QUEUE_NAME not like '%Sykes%' and GROUP_QUEUE_NAME not like '%Open Access%' and ( ( (DATE_HOUR) >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (DATE_HOUR) < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) group by 1, 2, 3 order by 1 desc
SELECT ( TO_CHAR( TO_DATE(cs_twilio_chat_summary."CHAT_STARTED_AT"), 'YYYY-MM-DD' ) ) AS Date, COUNT( DISTINCT CASE WHEN lookup_agent_hours.employee__email LIKE ( CAST('%' AS VARCHAR) || CAST( REPLACE( REPLACE(REPLACE('tw-india', '^', '^^'), '%', '^%'), '_', '^_' ) AS VARCHAR ) || CAST('%' AS VARCHAR) ) ESCAPE '^' THEN cs_twilio_chat_summary."CHAT_ID" ELSE NULL END ) AS sykes_chat, ( sum( case when cs_twilio_chat_summary."IS_ABANDONED_FLAG" = true then 1 else 0 end ) / sum( case when coalesce( cs_twilio_chat_summary.chat_id, cs_twilio_chat_summary.task_sid ) is not null then 1 else null end ) ) * COUNT( DISTINCT CASE WHEN lookup_agent_hours.employee__email LIKE ( CAST('%' AS VARCHAR) || CAST( REPLACE( REPLACE(REPLACE('tw-india', '^', '^^'), '%', '^%'), '_', '^_' ) AS VARCHAR ) || CAST('%' AS VARCHAR) ) ESCAPE '^' THEN cs_twilio_chat_summary."CHAT_ID" ELSE NULL END ) as aban FROM "REPORTS"."CS_TWILIO_CHAT_SUMMARY" AS cs_twilio_chat_summary LEFT JOIN rpt_cs_data.analytical_schedule__all_shifts AS lookup_agent_hours ON lookup_agent_hours.employee__email = lower((lower(cs_twilio_chat_summary."AGENT_EMAIL"))) and lookup_agent_hours.shift_start_time = ( TO_CHAR( DATE_TRUNC( 'minute', DATE_TRUNC( 'minute', TIMESTAMPADD( MINUTE, -( MOD( EXTRACT( MINUTE FROM TO_TIMESTAMP_NTZ(cs_twilio_chat_summary."CHAT_AGENT_STARTED_AT") ), 30 ) ), TO_TIMESTAMP_NTZ(cs_twilio_chat_summary."CHAT_AGENT_STARTED_AT") ) ) ), 'YYYY-MM-DD HH24:MI' ) ) WHERE ( ( ( (((cs_twilio_chat_summary."CHAT_STARTED_AT"))) >= ((DATEADD('day', -43, CURRENT_DATE()))) AND (((cs_twilio_chat_summary."CHAT_STARTED_AT"))) < ( ( DATEADD('day', 44, DATEADD('day', -43, CURRENT_DATE())) ) ) ) ) ) AND (cs_twilio_chat_summary."QUEUE") = 'English - Business' GROUP BY ( TO_DATE(cs_twilio_chat_summary."CHAT_STARTED_AT") ) ORDER BY 1 DESC
SELECT CASE WHEN ( lookup_agent_hours.activity_name IN ( 'sick day tampa', 'sick day tallinn - no note', 'sick day', 'me day tampa', 'me day', 'compassionate leave tampa', 'compassionate leave', 'child care leave' ) ) THEN 'Unplanned Absence' WHEN ( lookup_agent_hours.activity_name IN ( 'vacation tampa', 'unpaid leave', 'study leave', 'pregnancy & maternity leave', 'national service', 'hospitalization', 'holiday', 'father''s leave', 'enhanced holiday', 'additional leave - child', 'additional vacation days tallinn', 'garden leave', 'public holiday leave' ) ) THEN 'Planned Absence' ELSE 'Worked hours' END AS absences, ( TO_CHAR(TO_DATE(SHIFT_START_LOCAL_TIME), 'YYYY-MM-DD') ) AS "lookup_agent_hours.shift_start_local_time_date", EMPLOYEE__TEAM_LEAD_EMAIL AS "lookup_agent_hours.team_lead_email", COALESCE( SUM( CASE WHEN ((lookup_agent_hours.channel_type IS NOT NULL)) THEN case when lookup_agent_hours.channel_type in ('email', 'phone', 'chat') then ( case when lookup_agent_hours.phone_hours is Null then 0 else lookup_agent_hours.phone_hours end ) + ( case when lookup_agent_hours.chat_hours is Null then 0 else lookup_agent_hours.chat_hours end ) + ( case when lookup_agent_hours.email_hours is Null then 0 else lookup_agent_hours.email_hours end ) /* +  */ else lookup_agent_hours.hours_worked end ELSE NULL END ), 0 ) AS "lookup_agent_hours.hours_worked_total" FROM RPT_CS_DATA.ANALYTICAL_SCHEDULE__ALL_SHIFTS AS lookup_agent_hours WHERE EMPLOYEE__DEPARTMENT = 'cs' AND ( case when lookup_agent_hours.employee__active_status is NULL then FALSE ELSE TRUE END ) AND ( ( (SHIFT_START_LOCAL_TIME) >= ( ( DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) AND (SHIFT_START_LOCAL_TIME) < ( ( DATEADD( 'day', 45, DATEADD('day', -45, DATE_TRUNC('week', CURRENT_DATE())) ) ) ) ) ) GROUP BY (TO_DATE(SHIFT_START_LOCAL_TIME)), 1, 3 ORDER BY 1, 2
WITH cs_twilio_parallel_chats AS ( with time_table as ( SELECT to_timestamp( ROW_NUMBER() OVER ( ORDER BY seq8() ) - 1 ) as tt FROM table (generator(rowcount => 86400)) ), parallel_chat_base as ( select CHAT_ID, TICKET_ID, CHAT_AGENT_STARTED_AT, CHAT_ENDED_AT, QUEUE, AGENT_NAME, AGENT_EMAIL from REPORTS.cs_twilio_chat_summary where agent_email is not Null ) /*  Query start  */ select agent_schedule_timestamp, agent_email, agent_name, team_lead, start_date, channel_name, channel_type, queue, mins_worked, count_chats_total, case when count_chats_total = 0 then '1) idle' when count_chats_total = 1 then '2) single' when count_chats_total = 2 then '3) double' else '4) multiple' end agent_time_category_total, count_chats_queue, case when count_chats_queue = 0 then '1) idle' when count_chats_queue = 1 then '2) single' when count_chats_queue = 2 then '3) double' else '4) multiple' end agent_time_category_queue from ( select distinct agent_schedule_timestamp, agent_time_table.agent_email, agent_time_table.agent_name, agent_time_table.team_lead, agent_time_table.start_date, channel_name, channel_type, queue, mins_worked, count(distinct CHAT_ID) over ( partition by agent_schedule_timestamp, agent_time_table.agent_email, agent_time_table.agent_name, channel_name, channel_type, queue ) count_chats_queue, count(distinct CHAT_ID) over ( partition by agent_schedule_timestamp, agent_time_table.agent_email, agent_time_table.agent_name, channel_name, channel_type ) count_chats_total from parallel_chat_base full outer join ( select timestamp_ntz_from_parts(day_date, fill_time) as agent_schedule_timestamp, AGENT_EMAIL, AGENT_NAME, TEAM_LEAD, START_DATE, CHANNEL_NAME, CHANNEL_TYPE, MINS_WORKED from ( select TO_DATE(THE_HOURPART) day_date, TO_TIME(THE_HOURPART) time_start, dateadd(mins, 30, TO_TIME(THE_HOURPART)) time_end, THE_HOURPART, AGENT_EMAIL, AGENT_NAME, TEAM_LEAD, START_DATE, CHANNEL_NAME, CHANNEL_TYPE, 1 as MINS_WORKED from reports.LOOKUP_AGENT_HOURS where THE_HOURPART >= '2020-02-18' and THE_HOURPART < current_date and CHANNEL_TYPE = 'Chat' and CHANNEL_NAME not ilike 'chatmaster%' ) t1 left join ( SELECT to_time(tt) fill_time FROM time_table where tt < '1970-01-02' and date_part(second, tt) = 0 ) t2 on t1.time_start <= t2.fill_time and t1.time_end > t2.fill_time ) agent_time_table on parallel_chat_base.AGENT_EMAIL = agent_time_table.AGENT_EMAIL and parallel_chat_base.CHAT_AGENT_STARTED_AT <= agent_time_table.agent_schedule_timestamp and parallel_chat_base.CHAT_ENDED_AT >= agent_time_table.agent_schedule_timestamp where agent_schedule_timestamp is not null ) ) SELECT ( TO_CHAR( TO_DATE( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ), 'YYYY-MM-DD' ) ) AS "cs_twilio_parallel_chats.agent_schedule_timestamp_date", ( CAST( EXTRACT( HOUR FROM TO_TIMESTAMP_NTZ( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) ) AS INT ) ) AS "cs_twilio_parallel_chats.agent_schedule_timestamp_hour_of_day", case when cs_twilio_parallel_chats."QUEUE" = 'English - Australia' or cs_twilio_parallel_chats."QUEUE" = 'English - APAC' then 'APAC Chats' else cs_twilio_parallel_chats."QUEUE" end AS "cs_twilio_parallel_chats.queue", AVG( CASE WHEN ( cs_twilio_parallel_chats."COUNT_CHATS_TOTAL" > 0 ) THEN cs_twilio_parallel_chats."COUNT_CHATS_TOTAL" ELSE NULL END ) AS "cs_twilio_parallel_chats.avg_concurrency" FROM cs_twilio_parallel_chats WHERE ( ( ( ( ( ( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) ) ) >= ((DATEADD('day', -44, CURRENT_DATE()))) AND ( ( ( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) ) ) < ( ( DATEADD('day', 45, DATEADD('day', -44, CURRENT_DATE())) ) ) ) ) ) GROUP BY ( TO_DATE( cs_twilio_parallel_chats."AGENT_SCHEDULE_TIMESTAMP" ) ), 2, 3 ORDER BY 1 DESC
